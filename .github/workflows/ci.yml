name: CI

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install deps (pnpm)
        run: pnpm install --frozen-lockfile

      - name: Build web
        run: pnpm run build:web

  deploy_preview:
    if: github.event_name == 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    outputs:
      preview_url: ${{ steps.deploy.outputs.preview_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install vercel CLI
        run: pnpm dlx vercel@latest --version

      - name: Pull Vercel env (preview)
        run: pnpm dlx vercel@latest pull --yes --environment=preview --cwd apps/web --token "${{ secrets.VERCEL_TOKEN }}"

      - name: Deploy preview to Vercel
        id: deploy
        shell: bash
        run: |
          set -euo pipefail
          url=$(pnpm dlx vercel@latest deploy --cwd apps/web --token "${{ secrets.VERCEL_TOKEN }}" --yes)
          echo "preview_url=$url" >> "$GITHUB_OUTPUT"
          echo "Preview URL: $url"

  e2e:
    if: github.event_name == 'pull_request'
    needs: deploy_preview
    runs-on: ubuntu-latest
    steps:
      - name: Wait for preview to be up (health check)
        shell: bash
        env:
          URL: ${{ needs.deploy_preview.outputs.preview_url }}
        run: |
          set -euo pipefail
          echo "Checking $URL"
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            if [ "$code" -ge 200 ] && [ "$code" -lt 500 ]; then
              echo "OK ($code)"; break
            fi
            echo "Try $i/60 ($code)"; sleep 2
            if [ $i -eq 60 ]; then echo "Timeout waiting for preview"; exit 1; fi
          done
          # Tu możesz dodać real E2E (Playwright/Cypress) korzystające z $URL jako base:
          # npx playwright install --with-deps
          # BASE_URL="$URL" pnpm test:e2e

  # Opcjonalny deploy produkcyjny po merge do main (włącz jeśli chcesz)
  deploy_prod:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: false
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install vercel CLI
        run: pnpm dlx vercel@latest --version
      - name: Pull Vercel env (production)
        run: pnpm dlx vercel@latest pull --yes --environment=production --cwd apps/web --token "${{ secrets.VERCEL_TOKEN }}"
      - name: Deploy production to Vercel
        run: pnpm dlx vercel@latest deploy --cwd apps/web --prod --yes --token "${{ secrets.VERCEL_TOKEN }}"
